name:  main CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and test with Maven
        run: mvn -B verify
        
      - name: Find modified projects
        run: |
          touch modified-projects.txt
          git show --pretty="format:" --name-only -m ${GITHUB_REF_NAME} | grep -v -E '^(devtools|.github)/' | awk -F '/' '{print $1}' | uniq > modified-projects.txt   
      
      - name: Install Dependencies
        run: |
          mvn install
          cd model
          mvn install
          
      - name: Build and push Docker images
        run: |
          # Split modified projects into an array
          IFS=$'\n' read -d '' -r -a projects < modified-projects.txt

          # Define the number of parallel jobs based on the number of projects
          num_jobs=${#projects[@]}
          # Run each project's analysis in parallel
          for ((i = 0; i < $num_jobs; i++)); do
            project=${projects[i]}

            # Check if $project is a directory
            if test -d "$project"; then
              echo "Starting quality gate check and security scan on $project"
              (
                echo "Running SonarCloud quality gate and security checks..."
                cd $project
                mvn clean package spring-boot:repackage
              ) &
            else
              echo "$project is not a directory, skipping..."
            fi
          done

          # Wait for all parallel jobs to finish
          wait
          
