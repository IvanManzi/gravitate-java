<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.content_manager_service.dao.BlogDao" >

    <insert id="createBlog" parameterType="com.model.BlogVO">
        INSERT INTO blog
        (user_id,title,tags,problem_description,topic_thumbnail)
        VALUES
        (#{userId},#{title},#{tags},#{problemDescription},#{topicThumbnail})
    </insert>

    <!--<resultMap id="tResult" type="Map">
        <collection property="comments" ofType="Map" select="selectBlogReply" column="__id" />
    </resultMap>-->

    <select id="getAllBlogs" resultType="Map">
        SELECT T.blog_id,T.title,T.tags,T.problem_description,T.topic_thumbnail,T.created_at,U.email,U.first_name,U.last_name,U.user_type,U.profile_picture_path
        FROM blog T
        INNER JOIN app_user U
        ON
        T.user_id = U.user_id
        <where>
            <if test="topic != null">
                LOWER(T.title) LIKE LOWER('%' || #{topic} || '%')
            </if>
            <if test="search != null">
                AND LOWER(U.first_name) LIKE LOWER('%' || #{search} || '%') OR LOWER(U.last_name) LIKE LOWER('%' || #{search} || '%')
            </if>
        </where>
        ORDER BY T.created_at DESC
    </select>

    <!--<resultMap id="BlogCommentsResult" type="Map">
        <collection property="sub_comments" ofType="com.model.BlogReplyVO" select="getBlogCommentSubComments" column="blog_reply_id" />
    </resultMap>-->

    <!--<select id="selectBlogReply" resultType="Map">
        SELECT R.blog_reply_id,R.blog_id,R.user_id,R.comment,R.parent,R.created_at,R.updated_at,A.first_name,A.last_name,A.email,
        A.profile_picture_path
        FROM blog_reply R
        INNER JOIN
        app_user A
        ON
        A.user_id = R.user_id
        WHERE R.blog_id = #{__id}
    </select>-->


    <select id="getBlogComments" resultType="Map">
        SELECT R.blog_reply_id,R.blog_id,R.user_id,R.comment,R.parent,R.created_at,R.updated_at,A.first_name,A.last_name,A.email,
        A.profile_picture_path
        FROM blog_reply R
        INNER JOIN
        app_user A
        ON
        A.user_id = R.user_id
        WHERE R.blog_id = #{blogId}
        <if test="parent != null">
            AND R.parent = #{parent}
        </if>
        <if test="parent == null">
            AND R.parent IS NULL
        </if>
    </select>

    <select id="getUserBlogsByQuarter" resultType="com.model.BlogVO">
        SELECT * FROM blog WHERE user_id = #{userId} AND extract(quarter FROM created_at) = #{quarter}
    </select>

    <update id="updateBlog" parameterType="com.model.BlogVO">
        UPDATE blog
        SET
        title = #{title},
        tags = #{tags},
        problem_description = #{problemDescription},
        topic_thumbnail = #{topicThumbnail}
        WHERE
        blog_id = #{blogId} AND user_id = #{userId}
    </update>

    <delete id="deleteBlog" parameterType="Long">
        DELETE FROM blog WHERE blog_id = #{blogId}
    </delete>




</mapper>