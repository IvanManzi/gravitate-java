<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.user_manager_service.dao.UserDao" >

    <insert id="createGravitateUser" parameterType="com.model.UserVO" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO app_user
        (user_type,managed_by,role_id,user_level,jira_id,email,otp,password,alternate_email,first_name,last_name,country,date_of_birth,phone_number,profile_picture_path,contract_path,employment_status,joining_date,billing,bank_name,account_number,admin_page_access)
        VALUES
        (#{userType},#{managedBy},#{roleId},#{userLevel},#{jiraId},#{email},#{otp},#{password},#{alternateEmail},#{firstName},#{lastName},#{country},#{dateOfBirth},#{phoneNumber},#{profilePicturePath},#{contractPath},#{employmentStatus},#{joiningDate},#{billing},#{bankName},#{accountNumber},<if test="adminPageAccess != null">
            ARRAY[
            <foreach item="access" collection="adminPageAccess" separator=",">
                #{access}
            </foreach>
            ]
        </if>
        <if test="adminPageAccess == null">
            null
        </if> )
    </insert>

    <select id="checkIfUsernameExists" parameterType="String" resultType="int">
        SELECT CASE
        WHEN EXISTS(
            SELECT 1 FROM app_user
            WHERE
            email = #{username} OR alternate_email = #{username} LIMIT 1
        )
        THEN 1 ELSE 0
        END
    </select>

    <resultMap type="com.model.UserVO" id="userMap">
        <result column="admin_page_access" property="adminPageAccess" javaType="[Ljava.lang.String;" typeHandler="com.util.AdminPageAccessTypeHandler"/>
    </resultMap>



    <select id="getGravitateUserByUsername" resultMap="userMap" parameterType="String">
        SELECT *, CASE WHEN admin_page_access IS NULL THEN null ELSE admin_page_access END as admin_page_access FROM app_user
        WHERE email = #{username}
        LIMIT 1
    </select>

    <select id="getGravitateUserInfo" resultType="Map" parameterType="String">
        SELECT
        A.user_id,
        A.user_id AS __id,
        A.user_type,
        A.is_account_non_expired,
        A.is_account_non_locked,
        A.status,
        A.admin_page_access,
        A.otp,
        A.user_level,
        A.managed_by,
        A.email,
        A.jira_id,
        A.alternate_email,
        A.password,
        A.first_name,
        A.last_name,
        A.country,
        A.date_of_birth,
        A.joining_date,
        A.phone_number,
        A.profile_picture_path,
        A.contract_path,
        A.role_id,
        A.employment_status,
        A.billing,
        A.bank_name,
        A.account_number,
        R.role_name
        FROM app_user A
        LEFT JOIN
        role R
        ON
        R.role_id = A.role_id
        WHERE A.email = #{username}
    </select>

    <select id="getUserTotalBilling" resultType="int">
        SELECT COALESCE(SUM(total_amount), 0) AS total FROM payment WHERE user_id = #{userId};
    </select>

    <select id="getUserTotalEmployeeReferrals" resultType="int">
        SELECT COALESCE(SUM(P.referral_amount), 0) AS total FROM position_referral R
        INNER JOIN
        position P
        ON
        P.position_id = R.position_id
        WHERE R.referred_by = #{userId}
        AND
        R.referral_status = 66
    </select>

    <select id="getUserTotalHotOpportunities" resultType="int">
        SELECT COALESCE(SUM(P.incentive_amount), 0) AS total FROM position_self_referral R
        INNER JOIN
        position P
        ON
        P.position_id = R.position_id
        WHERE R.user_id = #{userId}
        AND
        R.referral_status = 66
    </select>

    <delete id="deleteGravitateUser" parameterType="Long">
        DELETE FROM app_user WHERE user_id = #{userId}
    </delete>

    <update id="updateGravitateUser" parameterType="com.model.UserVO">
        UPDATE app_user
        SET
        user_type = #{userType},
        managed_by = #{managedBy},
        role_id = #{roleId},
        otp = #{otp},
        <if test="password != null">
            password = #{password},
        </if>
        user_level = #{userLevel},
        jira_id = #{jiraId},
        email = #{email},
        alternate_email = #{alternateEmail},
        first_name = #{firstName},
        last_name = #{lastName},
        country = #{country},
        date_of_birth = #{dateOfBirth},
        phone_number = #{phoneNumber},
        profile_picture_path = #{profilePicturePath},
        contract_path = #{contractPath},
        employment_status = #{employmentStatus},
        joining_date = #{joiningDate},
        billing = #{billing},
        bank_name = #{bankName},
        account_number = #{accountNumber},
        admin_page_access = <if test="adminPageAccess != null">
                            ARRAY[
                            <foreach item="access" collection="adminPageAccess" separator=",">
                                #{access}
                            </foreach>
                            ]
                            </if>
                            <if test="adminPageAccess == null">
                                null
                            </if>
        WHERE
        user_id = #{userId}
    </update>

    <update id="updateGravitateUserPassword" parameterType="com.model.UserVO">
        UPDATE app_user
        SET
        password = #{password}
        WHERE
        user_id = #{userId}
    </update>

    <resultMap id="allUsersResult" type="Map">
        <collection property="projects" ofType="com.model.ProjectVO" select="getUserProjects" column="userId=__id" />
    </resultMap>

    <select id="getAllGravitateUsers" parameterType="String" resultMap="allUsersResult">
        SELECT
        A.user_id,
        A.user_id AS __id,
        A.user_type,
        A.is_account_non_expired,
        A.is_account_non_locked,
        A.status,
        A.admin_page_access,
        A.otp,
        A.user_level,
        A.managed_by,
        A.jira_id,
        A.email,
        A.alternate_email,
        A.password,
        A.first_name,
        A.last_name,
        A.country,
        A.date_of_birth,
        A.joining_date,
        A.phone_number,
        A.profile_picture_path,
        A.contract_path,
        A.role_id,
        A.employment_status,
        A.billing,
        A.bank_name,
        A.account_number,
        AR.first_name AS managerFirstName,
        AR.last_name AS managerLastName,
        R.role_name
        FROM app_user A
        LEFT JOIN
        app_user AR
        ON
        AR.user_id = A.managed_by
        LEFT JOIN
        role R
        ON
        R.role_id = A.role_id
        WHERE A.user_type != 'Admin'
        <if test="search != null">
            <bind name="pattern" value="'%' + search + '%'"/>
            AND first_name LIKE #{pattern} AND last_name LIKE #{pattern}
        </if>
        ORDER BY A.created_at DESC
    </select>


    <select id="getUserProjects" resultType="com.model.ProjectVO">
        SELECT * FROM project P
        WHERE
        P.project_id IN (SELECT U.project_id FROM user_project U WHERE U.user_id = #{userId})
        OR
        P.project_lead = #{userId}
    </select>


    <select id="getGravitateUserById" parameterType="Long" resultType="com.model.UserVO">
        SELECT * FROM app_user WHERE user_id = #{userId}
    </select>

    <select id="getGravitateUserTeamMembers" resultType="Map">
        SELECT A.user_id,A.first_name,A.last_name,A.email,A.profile_picture_path,R.role_name,R.rolekra
        FROM
        app_user A
        INNER JOIN
        role R
        ON
        A.role_id = R.role_id
        <where>
            <if test="userLevel == 'ROLE_PROJECT_MANAGER' ">
                A.managed_by = #{userId}
            </if>
            <if test="userLevel == 'ROLE_NON_ADMIN_USER'">
                AND A.managed_by = #{manager}
            </if>
        </where>
        ORDER BY A.created_at DESC
    </select>

    <select id="getGravitateManagerUsers" resultType="com.model.UserVO">
        SELECT * FROM app_user WHERE user_level = 2 <!--Manager users have level 2 -->
        <if test="search != null">
            <bind name="pattern" value="'%' + search + '%'"/>
            AND first_name LIKE #{pattern} AND last_name LIKE #{pattern}
        </if>
    </select>

    <update id="updateUserStatus">
        UPDATE app_user
        SET
        is_account_non_locked = #{status}
        WHERE user_id = #{userId}
    </update>


    <resultMap id="wishesResult" type="Map">
        <collection property="comments" ofType="Map" select="getWishReply" column="__id" />
    </resultMap>

    <select id="getUserWishes" resultMap="wishesResult">
        SELECT W.wish_id AS __id, W.wish_id ,W.admin_id,W.wish_type,W.comment,W.created_at,A.user_id,A.email,A.country,A.first_name,A.last_name,A.phone_number,A.profile_picture_path
        FROM app_user A
        INNER JOIN
        wish W
        ON W.user_id = A.user_id
        WHERE
        W.user_id = #{userId}
        AND
        W.created_at = CURRENT_DATE
        ORDER BY W.created_at DESC
    </select>

    <select id="getWishReply" parameterType="Long" resultType="Map">
        SELECT R.wish_reply_id,R.wish_id,R.user_id,R.message,R.created_at,R.updated_at,A.first_name,A.last_name,A.email,A.profile_picture_path
        FROM wish_reply R
        INNER JOIN
        app_user A
        ON
        A.user_id = R.user_id
        WHERE
        wish_id = #{wishId}
    </select>

    <resultMap id="quarterResult" type="Map">
        <collection property="performance" ofType="Map" select="getUserQuarterPerformance" column="quarter=quarter,userId=user_id" />
    </resultMap>

    <select id="getUserPerformance" parameterType="Long" resultMap="quarterResult">
        SELECT quarter,user_id FROM performance_evaluation_criteria_score WHERE user_id = #{userId} GROUP BY quarter,user_id
    </select>

    <select id="getUserQuarterPerformance" resultType="Map">
        SELECT SUM(points) AS totalPoints,COUNT(sprint) AS totalSprints FROM performance_evaluation_criteria_score WHERE user_id = #{userId} AND quarter = #{quarter}
    </select>




</mapper>