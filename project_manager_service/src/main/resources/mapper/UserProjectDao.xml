<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.project_manager_service.dao.UserProjectDao" >

    <insert id="assignUserToProjects" >
        INSERT INTO user_project
        (user_id, project_id)
        VALUES
        <foreach collection="projects" item="projectId" index="index" open="(" separator="),("  close=")">
            #{userId}, #{projectId}
        </foreach>

    </insert>

    <resultMap id="projectResult" type="Map">
        <collection property="assigned_users" ofType="com.model.UserVO" select="getUsersAssignedToProject" column="project_id" />
    </resultMap>

    <select id="getUsersAssignedToProject" resultType="com.model.UserVO">
        SELECT * FROM app_user A
        INNER JOIN
        user_project U
        ON
        U.user_id = A.user_id
        WHERE U.project_id = #{projectId}
    </select>

    <select id="getAllProjectsAndAssignedUsers" resultType="Map">
        SELECT A.user_id,A.user_type,A.first_name,A.last_name,A.email,A.country,A.profile_picture_path,P.project_id,P.project_name FROM app_user A
        INNER JOIN
        user_project U
        ON
        U.user_id = A.user_id
        INNER JOIN
        project P
        ON
        p.project_id = U.project_id
    </select>

    <resultMap id="billingInfoResult" type="Map">
        <collection property="tasks" ofType="Map" select="getUserProjectTasks" column="userId=__userId,projectId=__project_id,month=month" />
        <collection property="incentives" ofType="Map" select="getUserProjectIncentives" column="userId=__userId,projectId=__project_id,month=month" />
        <collection property="user" ofType="com.model.UserVO" select="getAssignedUser" column="userId=__userId" />
    </resultMap>

    <select id="getAllProjectsBillingInformation" resultMap="billingInfoResult">
       SELECT P.project_id,P.project_id AS __project_id,P.project_name,R.user_id,R.user_id AS __userId,SUM(R.hours_spent) AS totalHours,extract(month from R.created_at) AS month,extract(year from R.created_at) AS year FROM project P
        INNER JOIN
        task_report R
        ON
        P.project_id = R.project_id
        <where>
            <if test="from!=null and to!=null">
                R.created_at::date BETWEEN #{from}::date AND #{to}::date
            </if>
            <if test="userId != null">
                AND R.user_id = #{userId}
            </if>
        </where>
        GROUP BY P.project_id, extract(month from R.created_at),extract(year from R.created_at),R.user_id
    </select>

    <select id="getUserProjectTasks" resultType="Map">
        SELECT T.task_report_id,T.project_id,T.is_paid,T.user_id,T.task_name,T.start_date,T.hours_spent,T.jira_task_id,T.created_at
        FROM task_report T
        WHERE
        T.user_id = #{userId}
        AND T.project_id = #{projectId}
        AND extract(month from T.created_at) = #{month}  <!--filter tasks by month-->
    </select>

    <select id="getUserProjectIncentives" resultType="Map">
        SELECT I.project_incentive_id,I.project_id,I.user_id,I.admin_id,I.status,SUM(I.performance_bonus) AS totalPerformanceBonus,SUM(I.employee_referral) AS employeeReferralTotalAmount,I.performance_bonus,
        I.client_referral,I.employee_referral,I.hot_opportunity,I.total_amount,I.created_at
        FROM project_incentive I
        WHERE
        project_id = #{projectId}
        AND
        user_id = #{userId}
        AND
        I.month = #{month}
        GROUP BY I.project_incentive_id,I.project_id,I.user_id,I.admin_id,I.status,I.performance_bonus,I.client_referral,I.employee_referral,I.hot_opportunity,I.total_amount,I.created_at
        LIMIT 1
    </select>

    <select id="getAssignedUser" resultType="com.model.UserVO">
        SELECT * FROM app_user WHERE user_id = #{userId} LIMIT 1
    </select>

    <!--<select id="getUserBillingInformation" resultType="Map">
        SELECT  DISTINCT P.project_id,A.user_id,A.billing,P.total_amount,EXTRACT(QUARTER FROM P.created_at) AS Month, SUM(T.hours_spent) As total_hours,P.status,
        COALESCE(P.performance_bonus,0) + COALESCE(P.employee_referral,0) AS incentives FROM project_incentive P
        INNER JOIN
        app_user A
        ON
        A.user_id = P.user_id
        LEFT JOIN
        task_report T
        ON
        T.project_id = P.project_id
        WHERE P.created_at BETWEEN #{from}::date AND #{to}::date AND A.user_id = #{userId}
        GROUP BY P.project_id,A.user_id,A.billing,P.total_amount,T.hours_spent,P.performance_bonus,P.employee_referral,P.status,P.created_at
    </select>-->

    <select id="checkIfUserIsAssignedToProject" parameterType="Long" resultType="int">
        SELECT CASE
        WHEN EXISTS(
        SELECT 1 FROM user_project
        WHERE
        project_id = #{projectId} AND user_id = #{userId} LIMIT 1
        )
        THEN 1 ELSE 0
        END
    </select>

    <select id="getGravitateUserProjects" resultType="com.model.ProjectVO" parameterType="Long">
        SELECT * FROM project P
        INNER JOIN
        user_project U
        ON
        U.project_id = P.project_id
        WHERE U.user_id = #{userId}
    </select>

    <!--<update id="updateProject" parameterType="com.model.ProjectVO">
        UPDATE project
        SET
        status = #{status},
        client_email = #{clientEmail},
        client_name = #{clientName},
        phone_number = #{phoneNumber},
        jira_id = #{jiraProjectKey},
        project_description = #{projectDescription},
        project_name = #{projectName}
        WHERE
        project_id = #{projectId}
        AND
        admin_id = #{adminId}
    </update>

    <delete id="deleteProject" parameterType="Long">
        DELETE FROM project WHERE project_id = #{projectId}
    </delete>-->




</mapper>